import pandas as pd
import matplotlib.pyplot as plt
import mysql.connector
import seaborn as sns
import numpy as np

db = mysql.connector.connect(
    host='localhost',
    password='Rfvg@2179',
    user='root',
    database='ecommerce'
)

cur = db.cursor()

# 1. Query to list all unique cities where customers are located
query = """SELECT DISTINCT customer_city FROM customers"""
cur.execute(query)
data = cur.fetchall()
print(data)

# 2. Query to Count number of orders placed in 2017
query = """ select count(order_id) from orders where year(order_purchase_timestamp) = 2017"""
cur.execute(query)
data = cur.fetchall()
print(data[0][0])

# 3. Query to find total sales per category
query = """select upper(products.product_category), round(sum(payments.payment_value),2)
    from products join order_items on products.product_id = order_items.product_id
    join payments on order_items.order_id = payments.order_id
    group by products.product_category"""
cur.execute(query)
data = cur.fetchall()
df = pd.DataFrame(data, columns=['Category', 'Total Sales'])
print(df)

# 4. Query to calculate percentage of orders that were paid in installments
query = """select (sum(case when payment_installments >= 1 then 1 else 0 end))/count(*)*100
from payments"""
cur.execute(query)
data = cur.fetchall()
print(data)

# 5. Query to 5. Count number of Customers from each state
query = """select customer_state, count(customer_id) from customers group by customer_state"""
cur.execute(query)
data = cur.fetchall()
df = pd.DataFrame(data, columns=['State', 'Customer Count'])
df = df.sort_values('Customer Count', ascending=False)
plt.bar(df['State'], df['Customer Count'])
plt.show()

# 6. Query to Calculate the number of orders per month in 2018.
query = """SELECT MONTHNAME(order_purchase_timestamp) AS month_name, COUNT(order_id) AS order_count 
        FROM orders 
        WHERE YEAR(order_purchase_timestamp) = 2018 
        GROUP BY MONTHNAME(order_purchase_timestamp), MONTH(order_purchase_timestamp)
        """
cur.execute(query)
data = cur.fetchall()
df = pd.DataFrame(data, columns=['months', 'order_count'])
order_month = ['January', 'February', 'March', 'April', 'May', 'June', 
               'July', 'August', 'September', 'October', 'November', 'December']
ax = sns.barplot(x='months', y='order_count', data=df, order=order_month, color='red')
plt.xticks(rotation=45)
ax.bar_label(ax.containers[0])
plt.title("Count of Orders by Months in 2018")
plt.show()

# 7. Query to Find the average number of products per order, grouped by customer city.
query = """with count_per_order as (select orders.order_id, orders.customer_id, count(order_items.order_id) as oc from orders
            join order_items on order_items.order_id = orders.order_id
            group by orders.order_id, orders.customer_id)

            select customers.customer_city, round(avg(count_per_order.oc),2)average_orders
            from customers join count_per_order 
            on customers.customer_id = count_per_order.customer_id 
            group by customers.customer_city
        """
cur.execute(query)
data = cur.fetchall()
df = pd.DataFrame(data, columns=['City', 'Average Products per order'])
df = df.sort_values('Average Products per order', ascending=False)
print(df.head(10))

# 8. Query to Calculate the percentage of total revenue contributed by each product category.
query = """select upper(products.product_category) category, 
round((sum(payments.payment_value)/(select sum(payment_value) from payments))*100,2) sales_percentage
from products join order_items 
on products.product_id = order_items.product_id
join payments 
on payments.order_id = order_items.order_id
group by category order by sales_percentage desc"""

cur.execute(query)
data = cur.fetchall()
df = pd.DataFrame(data,columns = ["Category", "percentage distribution"])
print(df.head())

# 9. Query to Identify the correlation between product price and the number of times a product has been purchased.
query = """select products.product_category, 
count(order_items.product_id),
round(avg(order_items.price),2)
from products join order_items
on products.product_id = order_items.product_id
group by products.product_category"""

cur.execute(query)
data = cur.fetchall()
df = pd.DataFrame(data,columns = ["Category", "order_count","price"])

arr1 = df["order_count"]
arr2 = df["price"]

a = np.corrcoef([arr1,arr2])
print("the correlation is", a[0][-1])


# 10. Query to Calculate the total revenue generated by each seller, and rank them by revenue.
query = """ select *, dense_rank() over(order by revenue desc) as rn from
            (select order_items.seller_id, sum(payments.payment_value)
            revenue from order_items join payments
            on order_items.order_id = payments.order_id
            group by order_items.seller_id) as a """

cur.execute(query)
data = cur.fetchall()
df = pd.DataFrame(data, columns = ["seller_id", "revenue", "rank"])
df = df.head()
sns.barplot(x = "seller_id", y = "revenue", data = df)
plt.xticks(rotation = 90)
plt.show()